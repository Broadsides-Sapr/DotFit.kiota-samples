/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { serializePet, type Pet } from '../models/';
import { FindByStatusRequestBuilderRequestsMetadata, FindByStatusRequestBuilderUriTemplate, type FindByStatusRequestBuilder } from './findByStatus/';
import { FindByTagsRequestBuilderRequestsMetadata, FindByTagsRequestBuilderUriTemplate, type FindByTagsRequestBuilder } from './findByTags/';
import { type WithPetItemRequestBuilder, WithPetItemRequestBuilderNavigationMetadata, WithPetItemRequestBuilderRequestsMetadata, WithPetItemRequestBuilderUriTemplate } from './item/';
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /pet
 */
export interface PetRequestBuilder extends BaseRequestBuilder<PetRequestBuilder> {
    /**
     * The findByStatus property
     */
    get findByStatus(): FindByStatusRequestBuilder;
    /**
     * The findByTags property
     */
    get findByTags(): FindByTagsRequestBuilder;
    /**
     * Gets an item from the petstore.utilities.pet.item collection
     * @param petId ID of pet to return
     * @returns a WithPetItemRequestBuilder
     */
     byPetId(petId: number) : WithPetItemRequestBuilder;
    /**
     * Add a new pet to the store
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
     post(body: Pet, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * Update an existing pet
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
     put(body: Pet, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<ArrayBuffer | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPostRequestInformation(body: Pet, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toPutRequestInformation(body: Pet, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PetRequestBuilderNavigationMetadata: Record<Exclude<keyof PetRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byPetId: {
        uriTemplate: WithPetItemRequestBuilderUriTemplate,
        requestsMetadata: WithPetItemRequestBuilderRequestsMetadata,
        navigationMetadata: WithPetItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["petId"],
    },
    findByStatus: {
        uriTemplate: FindByStatusRequestBuilderUriTemplate,
        requestsMetadata: FindByStatusRequestBuilderRequestsMetadata,
    },
    findByTags: {
        uriTemplate: FindByTagsRequestBuilderUriTemplate,
        requestsMetadata: FindByTagsRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PetRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendPrimitiveAsync",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePet,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
    put: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendPrimitiveAsync",
        responseBodyFactory:  "ArrayBuffer",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializePet,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/**
 * Uri template for the request builder.
 */
export const PetRequestBuilderUriTemplate = "{+baseurl}/pet";
/* tslint:enable */
/* eslint-enable */
