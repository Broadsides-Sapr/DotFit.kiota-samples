/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { type AdditionalDataHolder, type BaseRequestBuilder, type Parsable, type ParsableFactory, type ParseNode, type RequestConfiguration, type RequestInformation, type RequestsMetadata, type SerializationWriter } from '@microsoft/kiota-abstractions';

/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns a inventoryGetResponse
 */
export function createInventoryGetResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoInventoryGetResponse;
}
/**
 * The deserialization information for the current model
 * @returns a Record<string, (node: ParseNode) => void>
 */
export function deserializeIntoInventoryGetResponse(inventoryGetResponse: Partial<InventoryGetResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
export interface InventoryGetResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
/**
 * Builds and executes requests for operations under /store/inventory
 */
export interface InventoryRequestBuilder extends BaseRequestBuilder<InventoryRequestBuilder> {
    /**
     * Returns a map of status codes to quantities
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of InventoryGetResponse
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<InventoryGetResponse | undefined>;
    /**
     * Returns a map of status codes to quantities
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
export function serializeInventoryGetResponse(writer: SerializationWriter, inventoryGetResponse: Partial<InventoryGetResponse> | undefined = {}) : void {
    writer.writeAdditionalData(inventoryGetResponse.additionalData);
}
/**
 * Metadata for all the requests in the request builder.
 */
export const InventoryRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        responseBodyContentType: "application/json",
        adapterMethodName: "sendAsync",
        responseBodyFactory:  createInventoryGetResponseFromDiscriminatorValue,
    },
};
/**
 * Uri template for the request builder.
 */
export const InventoryRequestBuilderUriTemplate = "{+baseurl}/store/inventory";
/* tslint:enable */
/* eslint-enable */
