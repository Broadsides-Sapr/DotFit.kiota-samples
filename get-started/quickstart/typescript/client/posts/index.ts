// tslint:disable
// eslint-disable
// Generated by Microsoft Kiota
import { createPostFromDiscriminatorValue, deserializeIntoPost, serializePost, type Post } from '../models/';
import { PostItemRequestBuilder } from './item/';
import { BaseRequestBuilder, getPathParameters, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

export interface PostsRequestBuilderGetQueryParameters {
    /**
     * Filter results by title
     */
    title?: string;
    /**
     * Filter results by user ID
     */
    userId?: number;
}
/**
 * Builds and executes requests for operations under /posts
 */
export class PostsRequestBuilder extends BaseRequestBuilder<PostsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.posts.item collection
     * @param postId key: id of post
     * @returns a PostItemRequestBuilder
     */
    public byPostId(postId: number) : PostItemRequestBuilder {
        if(!postId) throw new Error("postId cannot be undefined");
        const urlTplParams = getPathParameters(this.pathParameters);
        urlTplParams["post%2Did"] = postId
        return new PostItemRequestBuilder(urlTplParams, this.requestAdapter);
    }
    /**
     * Instantiates a new PostsRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/posts{?userId*,title*}", (x, y) => new PostsRequestBuilder(x, y));
    }
    /**
     * Get posts
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Post
     */
    public get(requestConfiguration?: RequestConfiguration<PostsRequestBuilderGetQueryParameters> | undefined) : Promise<Post[] | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        return this.requestAdapter.sendCollectionAsync<Post>(requestInfo, createPostFromDiscriminatorValue, undefined);
    }
    /**
     * Create post
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of Post
     */
    public post(body: Post, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Post | undefined> {
        const requestInfo = this.toPostRequestInformation(
            body, requestConfiguration
        );
        return this.requestAdapter.sendAsync<Post>(requestInfo, createPostFromDiscriminatorValue, undefined);
    }
    /**
     * Get posts
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<PostsRequestBuilderGetQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
    /**
     * Create post
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPostRequestInformation(body: Post, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.POST, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializePost);
        return requestInfo;
    }
}
// tslint:enable
// eslint-enable
